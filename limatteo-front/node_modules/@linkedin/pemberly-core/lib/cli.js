/* eslint-disable no-await-in-loop */
const fs = require('fs');
const path = require('path');
const SilentError = require('silent-error');

const Task = require('./helpers/task');
const AssetHash = require('./tasks/asset-hash');
const BprBuild = require('./tasks/bpr-build');
const Command = require('./helpers/command-runner');
const PdscDownload = require('./tasks/pdsc-download');
const BuildApiMetadata = require('./tasks/build-api-metadata');
const ClientTarball = require('./tasks/client-tarball');
const Prepack = require('./tasks/prepack');
const Postpack = require('./tasks/postpack');
const { getPropertyFrom } = require('./helpers/utils');

module.exports = class CLI extends Task {
  constructor({ mpLocation, ui, commandName = 'build' }) {
    super(...arguments);

    this.commandName = commandName.toLowerCase();

    const pdscTask = new PdscDownload({ ui, mpLocation });
    const buildApiMetadataTask = new BuildApiMetadata({ ui, mpLocation });
    const emberBuildArgs = ['ember', 'build', '-prod'];

    if (process.env.APP) {
      emberBuildArgs.push(`--app=${process.env.APP}`);
    }

    const emberCommand = new Command({
      command: 'just',
      name: 'ember-build',
      args: emberBuildArgs,
      ui,
      mpLocation,
    });

    const { SKIP_SCHASH } = process.env;
    let assetHashTask = new AssetHash({ ui, mpLocation, app: process.env.APP });

    if (SKIP_SCHASH) {
      ui.writeWarnLine(
        `process.env.SKIP_SCHASH was set to true. Skipping asset hashing and compression.`
      );
      assetHashTask = new Task(ui);
    }

    const shouldFailBuild = getPropertyFrom(
      'pemberly.l10n.should-fail-build',
      path.join(mpLocation, 'package.json'),
      true
    );

    const l10nArgs = ['**/*.hbs', '--ignore', '**/tmp/**'];

    if (shouldFailBuild) {
      l10nArgs.push('--fail-on-error-increase');
    }

    const lintCommand = new Command({
      command: 'lint-validator',
      name: 'i10n-lint',
      args: l10nArgs,
      ui,
      mpLocation,
    });

    const clientTarballTask = new ClientTarball({ ui, mpLocation });
    const bprBuildTask = new BprBuild({ ui, commandName, mpLocation });

    let depSpecCommand = new Command({
      command: 'mint',
      args: ['dependency', 'create-dependency-spec'],
      ui,
      silent: true,
      mpLocation,
    });

    /*
     * In the rare case that dependency-spec is not created we generate the file. The most common
     * case is that you delete your ./build/ directory and then run `yarn build`.
     * Ember stdlib needs this: https://git.corp.linkedin.com:1367/plugins/gitiles/pemberly/ember-stdlib/+/master/lib/li-addon-mixin.js#92
     */
    if (fs.existsSync(path.join(mpLocation, 'build/dependency-spec.json'))) {
      depSpecCommand = new Task(ui);
    }

    const prepackTask = new Prepack({ ui, mpLocation });
    const postpackTask = new Postpack({ ui, mpLocation });

    // seperate prepack and postpack from other commands
    if (this.commandName === 'prepack' || this.commandName === 'postpack') {
      this.tasks = [prepackTask, postpackTask];
    } else if (this.commandName === 'build-api-metadata') {
      this.tasks = [buildApiMetadataTask];
    } else {
      this.tasks = [
        pdscTask,
        depSpecCommand,
        emberCommand,
        assetHashTask,
        lintCommand,
        clientTarballTask,
        bprBuildTask,
      ];
    }
  }

  async run() {
    const command = this.commandName;
    const commands = this.tasks.map(task => task.name);
    // we don't need mint build and snapshot for prepack and postpack
    if (command !== 'prepack' && command !== 'postpack') {
      commands.unshift('build');
      commands.unshift('snapshot');
    }

    if (!commands.includes(command)) {
      throw new SilentError(
        `[pemberly-core] Command '${command}' not supported. \n\nSupported commands: ${commands.join(
          ' | '
        )}`
      );
    }

    for (const task of this.tasks) {
      if (
        command === task.name ||
        command === 'build' ||
        command === 'snapshot'
      ) {
        await task.run();
      }
    }
  }
};
