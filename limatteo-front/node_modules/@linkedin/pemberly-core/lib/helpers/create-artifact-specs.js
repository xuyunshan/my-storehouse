const SilentError = require('silent-error');
const fs = require('fs-extra');
const path = require('path');
const merge = require('deepmerge');

/**
 * Merge artifact-spec.json
 *
 * @param {Object} productInfo
 * @return {Promise}
 */
async function mergeArtifactSpec(productInfo) {
  try {
    const originPath = path.join(productInfo.buildDir, 'artifact-spec.json');
    const existed = await fs.exists(originPath);

    const originArtifact = existed
      ? await fs.readJSON(path.join(productInfo.buildDir, 'artifact-spec.json'))
      : {};
    const newArtifact = await fs.readJSON(
      path.join(productInfo.pemberlyBuildDir, 'artifact-spec.json')
    );
    // merge
    const finalArtifact = merge(originArtifact, newArtifact);
    // write back
    await fs.writeJSON(originPath, finalArtifact, { spaces: 4 });
  } catch (e) {
    throw SilentError(e);
  }
}
/**
 * Merge module-artifact-spec.json
 *
 * @param {Object} productInfo
 * @return {Promise}
 */
async function mergeModuleArtifactSpec(productInfo) {
  try {
    const originPath = path.join(
      productInfo.buildDir,
      'module-artifact-spec.json'
    );
    const existed = await fs.exists(originPath);

    const originArtifact = existed
      ? await fs.readJSON(
          path.join(productInfo.buildDir, 'module-artifact-spec.json')
        )
      : {};
    const newArtifact = await fs.readJSON(
      path.join(productInfo.pemberlyBuildDir, 'module-artifact-spec.json')
    );
    // merge
    const finalArtifact = merge(originArtifact, newArtifact);
    // write back
    await fs.writeJSON(originPath, finalArtifact, { spaces: 4 });
  } catch (e) {
    throw SilentError(e);
  }
}

/**
 * Create artifact-spec.json and module-artifact-spec.json
 *
 * @param {Object} productInfo
 * @return {Promise}
 */
async function createArtifactSpec(productInfo) {
  const artifactSpec = {
    artifacts: {},
    org: productInfo.org,
    version: productInfo.nextVersion,
  };

  artifactSpec.artifacts[productInfo.target] = {
    ivyfile: path.join(
      productInfo.publishDir,
      `${productInfo.mpName}-${productInfo.nextVersion}.ivy`
    ),
    ivy: `ivy:/${productInfo.org}/${productInfo.mpName}/${productInfo.nextVersion}`,
  };
  artifactSpec.artifacts[`linkedin-${productInfo.mpName}`] = {
    artifact: `file://${productInfo.publishDir}/linkedin-${productInfo.mpName}-${productInfo.nextVersion}.tgz`,
    ivyfile: path.join(
      productInfo.publishDir,
      `${productInfo.mpName}-${productInfo.nextVersion}.ivy`
    ),
    ivy: `ivy:/${productInfo.org}/${productInfo.mpName}/${productInfo.nextVersion}`,
  };
  const moduleArtifactSpec = { ...artifactSpec };
  delete moduleArtifactSpec.org;
  delete moduleArtifactSpec.version;
  try {
    await fs.writeJson(
      path.join(productInfo.pemberlyBuildDir, 'artifact-spec.json'),
      artifactSpec,
      { spaces: 4 }
    );
    await fs.writeJson(
      path.join(productInfo.pemberlyBuildDir, 'module-artifact-spec.json'),
      moduleArtifactSpec,
      { spaces: 4 }
    );
    // merge artifact-spec.json and module-artifact-spec.json if existed
    await mergeArtifactSpec(productInfo);
    await mergeModuleArtifactSpec(productInfo);
  } catch (e) {
    throw new SilentError(
      `[post-pack]: Failed to create artifact-spec.json and module-artifact-spec.json: ${path.join(
        productInfo.pemberlyBuildDir,
        'artifact-spec.json'
      )}, ${path.join(
        productInfo.pemberlyBuildDir,
        'module-artifact-spec.json'
      )}`
    );
  }
}

module.exports = createArtifactSpec;
