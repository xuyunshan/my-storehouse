const execa = require('execa');
const fs = require('fs-extra');
const path = require('path');
const get = require('lodash.get');

module.exports = class Command {
  constructor({
    command,
    args = [],
    options = {},
    ui,
    name,
    silent,
    mpLocation,
  } = {}) {
    this.command = command;
    this.args = args;
    this.options = options;
    this.ui = ui;
    this.name = name;
    this.silent = silent;
    this.mpLocation = mpLocation;
  }

  /**
   * Check if the files `just` or `pemberly` exist in the root of
   * the project.
   */
  async justExists() {
    const justExists = await fs.pathExists(path.join(this.mpLocation, 'just'));
    const pemberlyExists = await fs.pathExists(
      path.join(this.mpLocation, 'pemberly')
    );

    return justExists || pemberlyExists;
  }

  async voltaPinned() {
    const packageJSON = await fs.readJson(
      path.join(this.mpLocation, 'package.json')
    );
    const voltaPin = get(packageJSON, 'volta', false);

    return voltaPin && process.env.VOLTA_HOME !== undefined;
  }

  async run() {
    const just = await this.justExists();
    const voltaPinned = await this.voltaPinned();

    if (!just && voltaPinned && this.command === 'just') {
      this.command = this.args.shift();
    }

    if (this.silent !== true) {
      this.ui.writeLine(
        `\n[pemberly-core] Running: ${this.command} ${this.args.join(' ')}\n`
      );
    }

    const child = execa(this.command, this.args, this.options);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    await child;
  }
};
