const fs = require('fs-extra');
const SilentError = require('silent-error');
const { getValue, setValue } = require('../helpers/meta-json');

/**
 * Update version field in package.json
 *
 * @param {String} packageJsonFile
 * @param {String} version
 * @param {String} metaFile file path for meta.json
 */
async function modifyVersion(packageJsonFile, version, metaFile) {
  const PACKAGE_JSON = packageJsonFile;
  try {
    const packageJson = JSON.parse(await fs.readFile(PACKAGE_JSON));
    // write the original version in meta.json
    await setValue(metaFile, 'version', packageJson.version);
    packageJson.version = version;
    await fs.writeJSON(PACKAGE_JSON, packageJson, { spaces: 2 });
  } catch (e) {
    throw new SilentError(
      `[pre-pack]: failed to modify the version in ${PACKAGE_JSON}`
    );
  }
}

/**
 * Revert version to the original one
 *
 * @param {String} packageJsonFile
 * @param {String} metaFile file path for meta.json
 */
async function revertVersion(packageJsonFile, metaFile) {
  const PACKAGE_JSON = packageJsonFile;
  try {
    const packageJson = JSON.parse(await fs.readFile(PACKAGE_JSON));
    const originVersion = await getValue(metaFile, 'version');
    packageJson.version = originVersion;
    await fs.writeJSON(PACKAGE_JSON, packageJson, { spaces: 2 });
  } catch (e) {
    throw new SilentError(
      `[post-pack]: failed to revert the version in ${PACKAGE_JSON}`
    );
  }
}

module.exports.modifyVersion = modifyVersion;
module.exports.revertVersion = revertVersion;
