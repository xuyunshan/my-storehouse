const fs = require('fs');
const path = require('path');
const Task = require('../helpers/task');
const Command = require('../helpers/command-runner');
const { getPropertyFrom } = require('../helpers/utils');

module.exports = class BprBuild extends Task {
  constructor({ mpLocation, commandName } = {}) {
    super(...arguments);

    this.name = 'bpr-build';
    this.commandName = commandName || false;
    this.mpLocation = mpLocation;
  }

  /*
   * This function kicks off the gradle build for the BPR. It requires
   * that we pass it a tarball of all of the "ember and node assets".
   * This includes /dist, node_modules that are needed on the server,
   * and the node binary (will be removed once notion lands).
   */
  async run() {
    const inputDirectory = path.join(this.mpLocation, 'build', 'pemberly-core');
    const MP_NAME = getPropertyFrom(
      'name',
      path.join(this.mpLocation, 'package.json')
    );
    const MP_VERSION = getPropertyFrom(
      'version',
      path.join(this.mpLocation, 'package.json')
    );

    const buildTarballLocation = path.resolve(
      `${inputDirectory}/${MP_NAME}-${MP_VERSION}.tgz`
    );

    const gradleArgs = [
      '-Prelease=true',
      '-PallArtifacts',
      `-PjsBundle=${buildTarballLocation}`,
    ];

    if (fs.existsSync(path.join(inputDirectory, 'spark-exclude.json'))) {
      gradleArgs.push(
        `-PsparkExclude=${path.resolve(
          path.join(inputDirectory, 'spark-exclude.json')
        )}`
      );
    }

    if (this.commandName === 'snapshot') {
      gradleArgs.push('-Psnapshot=true');
    }

    gradleArgs.push('build');

    if (process.env.DISABLE_BPR_BUILD !== true) {
      const gradleCommand = new Command({
        command: 'ligradle',
        args: gradleArgs,
        ui: this.ui,
        silent: true,
        mpLocation: this.mpLocation,
      });
      await gradleCommand.run();
    }
  }
};
