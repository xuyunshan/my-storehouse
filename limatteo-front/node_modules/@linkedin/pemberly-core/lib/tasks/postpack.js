// post pack script

const Task = require('../helpers/task');
const createIvy = require('../helpers/create-ivy');
const createArtifactSpecs = require('../helpers/create-artifact-specs');
const moveTarball = require('../helpers/move-tarball');
const { revertVersion } = require('../helpers/modify-package-json');
const getNextVersion = require('../helpers/next-version');
const getProductInfo = require('../helpers/get-product-info');
const { deletePackageLock } = require('../helpers/package-lock');
const path = require('path');
const fs = require('fs-extra');
const get = require('lodash.get');

module.exports = class Postpack extends Task {
  constructor({ mpLocation, nextVersion } = {}) {
    super(...arguments);
    this.name = 'postpack';
    this.mpLocation = mpLocation;
    this.productInfo = getProductInfo(mpLocation);
    this.nextVersion = nextVersion || null;
  }

  async run() {
    // get next version
    const nextVersion = this.nextVersion
      ? this.nextVersion
      : await getNextVersion(this.productInfo.buildDir);
    const info = {
      ...this.productInfo,
      nextVersion,
    }; // add extra info

    const packageJSON = await fs.readJSON(
      path.join(this.mpLocation, 'package.json')
    );
    const pemberlyConfig = get(packageJSON, 'pemberly', {});
    const packageVersionRevert = get(
      pemberlyConfig,
      'packageVersionRevert',
      true
    );

    await createIvy(info);
    this.ui.writeInfoLine(
      `[post-pack]: IVY file has been created successfully: ${path.join(
        info.publishDir,
        `${info.mpName}-${info.nextVersion}.ivy`
      )}`
    );
    await createArtifactSpecs(info); // create artifact-spec and module-artifact-spec
    this.ui.writeInfoLine(
      `[post-pack]: artifact-spec.json has been created successfully: ${path.join(
        info.buildDir,
        'artifact-spec.json'
      )}`
    );
    this.ui.writeInfoLine(
      `[post-pack]: module-artifact-spec.json has been created successfully: ${path.join(
        info.buildDir,
        'module-artifact-spec.json'
      )}`
    );
    await moveTarball(info);
    this.ui.writeInfoLine(
      `[post-pack]: Tarball has been create successfully in ${info.publishDir}`
    );

    if (packageVersionRevert) {
      await revertVersion(info.PACKAGE_JSON, info.metaFile);
      this.ui.writeInfoLine(
        `[post-pack]: The version in package.json has been reverted successfully: ${info.PACKAGE_JSON}`
      );
    }
    // As mentioned in ./prepeck.js package.lock needs to be packed into the tarball
    // we need to remove it after pack
    await deletePackageLock(this.mpLocation);
  }
};
