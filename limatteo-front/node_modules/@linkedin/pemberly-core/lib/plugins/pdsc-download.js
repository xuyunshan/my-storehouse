const path = require('path');
const fs = require('fs-extra');
const BroccoliPlugin = require('broccoli-plugin');
const { DEFAULT_DOWNLOAD_DIR } = require('../constants');
const PdscDownloadTask = require('../tasks/pdsc-download');

const PDSC_ARTIFACTS_TASK = 'ligradle downloadPdscArtifacts';

function getPdscArtifactsFile(downloadDir) {
  return `${downloadDir}/pdsc-artifacts.json`;
}

/*
 * This is a broccoli-plugin that allows ember-cli-pdsc-handler
 * and ember-m3-pdsc-model-builder to work within both the
 * pemberly-core and non pemberly-core worlds.
 */
module.exports = class PdscDownload extends BroccoliPlugin {
  constructor({ mpLocation, ui } = {}) {
    super([], { needsCache: false });

    this.ui = ui;
    this.mpLocation = mpLocation;
    this.task = new PdscDownloadTask({ mpLocation });
  }

  pemberlyCoreEnabled() {
    const packageObj = fs.readJsonSync(
      path.join(this.mpLocation, 'package.json')
    );

    const { pemberly } = packageObj;

    if (pemberly && (pemberly.pdsc || pemberly.idl)) {
      return true;
    }

    return false;
  }

  callGradle() {
    this.ui.writeLine(`executing \`${PDSC_ARTIFACTS_TASK}\``);

    // the previous behavior "allowed" this to gracefully fail
    try {
      this.ui.writeLine(
        require('child_process').execSync(PDSC_ARTIFACTS_TASK, { stdio: [] })
      );
    } catch (e) {
      this.ui.writeError(e);
    }
  }

  /**
   * Determines the location to download PDSC and IDL files to.  This is
   * configured in `package.json` at `pemberly.downloadDir` and defaults to
   * `DEFAULT_DOWNLOAD_DIR` if this configuration is unspecified.
   *
   * @returns {String} the path on disk to this task will download the PDSC and IDL files to
   */
  getDownloadDir() {
    let downloadDir = DEFAULT_DOWNLOAD_DIR;
    const pemberlyCoreEnabled = this.pemberlyCoreEnabled();

    if (pemberlyCoreEnabled) {
      const packageObj = fs.readJsonSync(
        path.join(this.mpLocation, 'package.json')
      );

      const { pemberly } = packageObj;

      if (pemberly.downloadDir) {
        ({ downloadDir } = pemberly);
      }
    }

    return downloadDir;
  }

  /**
   * Downloads PDSCs / IDLs / microschemas if they don't
   * already exist
   *
   * @name build
   * @returns {Promise} The promise that indicates when
   * the download is complete
   */
  build() {
    const downloadDir = this.getDownloadDir();
    const pemberlyCoreEnabled = this.pemberlyCoreEnabled();
    if (
      !fs.existsSync(
        path.join(this.mpLocation, getPdscArtifactsFile(downloadDir))
      )
    ) {
      if (pemberlyCoreEnabled) {
        return this.task.run();
      }

      this.callGradle();
    }

    return Promise.resolve(null);
  }
};
