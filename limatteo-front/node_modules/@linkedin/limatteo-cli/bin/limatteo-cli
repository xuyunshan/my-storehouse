#!/usr/bin/env node

const fse = require('fs-extra');
const path = require('path');
const argvObj = require('minimist')(process.argv.slice(2));
const { spawn } = require('child_process');
const homedir = require('os').homedir();
const chalk = require('chalk');
const projectRootPath = process.cwd();
const [, projectName] = /(\S*?)_trunk/gi.exec(path.basename(projectRootPath));
const tempFolderPath = `${homedir}/limatteo_tmp/`;
const tempBaseFolderPath = tempFolderPath + projectName;
const aliossPath = 'ossutilmac64';

let latestCommitMsg = '';

async function start() {
  if (argvObj['publish']) {
    console.log(chalk.green.bold('[INFO] Start to upload...'));
    console.log(chalk.green.bold('[INFO] Creating temp directory...'));
    createTempFolder();

    console.log(chalk.green.bold('[INFO] Pulling latest code from repository...'));
    await pullLatestCode();


    console.log(chalk.green.bold('[INFO] Getting latest commit message...'));
    await getCommitMessage(tempBaseFolderPath);

    console.log(chalk.green.bold('[INFO] Installing dependencies...'));
    await installDependency();

    console.log(chalk.green.bold('[INFO] Building project...'));
    await buildProject(tempBaseFolderPath, false);

    console.log(chalk.green.bold('[INFO] Uploading to Ali-CDN...'));
    await uploadToCDN();

    console.log(chalk.green.bold('[INFO] finished uploading'));

    console.log(`----Commit Message----`);
    console.log(latestCommitMsg);
  } else {
    console.log('current options include --publish')
  }
}

function createTempFolder() {
  fse.emptyDirSync(tempFolderPath);
}

function pullLatestCode() {
  return new Promise((resolve) => {
    const pullCode = spawn('mint', ['checkout', '--destination', tempBaseFolderPath, projectName]);

    pullCode.stdout.pipe(process.stdout);

    pullCode.on('close', (code) => {
      resolve();
    });
  });
}

function getCommitMessage() {
  return Promise.all([
    new Promise((resolve) => {
      const getVersionAndMessageCode = spawn('git', [
        '-C',
        tempBaseFolderPath,
        'log',
        '-n',
        '1',
        '--format=%s',
      ]);
      let receivedMsg = '';

      getVersionAndMessageCode.stdout.on('data', (trunk) => {
        receivedMsg += trunk;
      });

      getVersionAndMessageCode.on('close', () => {
        resolve(receivedMsg);
      });
    }),
    new Promise((resolve) => {
      const getVersionAndMessageCode = spawn('git', [
        '-C',
        tempBaseFolderPath,
        'log',
        '-n',
        '1',
        '--format=%b',
      ]);
      let receivedMsg = '';

      getVersionAndMessageCode.stdout.on('data', (trunk) => {
        receivedMsg += trunk;
      });

      getVersionAndMessageCode.on('close', () => {
        resolve(receivedMsg);
      });
    }),
  ]).then(([commitTitle, commitDetail]) => {
    latestCommitMsg = `${commitTitle.slice(0, 50)} ${commitDetail.slice(0, 50)}`;
  });
}

function installDependency() {
  return new Promise((resolve) => {
    const yarnBuildCode = spawn('yarn', [], { cwd: tempBaseFolderPath });

    yarnBuildCode.stdout.pipe(process.stdout);

    yarnBuildCode.on('close', (code) => {
      resolve();
    });
  });
}

function buildProject() {
  return new Promise((resolve) => {
    const yarnBuildCode = spawn('yarn', ['build'], { cwd: tempBaseFolderPath });

    yarnBuildCode.stdout.pipe(process.stdout);

    yarnBuildCode.on('close', (code) => {
      resolve();
    });
  });
}

function uploadToCDN() {
  return new Promise((resolve) => {
    const uploadCode = spawn(`${aliossPath}`, [
      'sync',
      `${tempBaseFolderPath}/dist/`,
      'oss://linkedin-event-cdn-origin/campaigns/',
      '--delete',
    ]);

    uploadCode.stdout.pipe(process.stdout);
    uploadCode.stderr.pipe(process.stderr);

    uploadCode.on('close', () => {
      resolve();
    });
  });
}

start();
