'use strict';

const expect = require('chai').expect;
const topLevelDependencyKeys = require('../').topLevelDependencyKeys;


const emptyPkg = {
};
const minimalPkg = {
  dependencies: {},
  devDependencies: {}
};

const pkgAat1 = {
  dependencies: {
    "A": "^1.0.0"
  },
  devDependencies: {}
};
const pkgAat1x = {
  dependencies: {
    "A": "^1.2.3"
  },
  devDependencies: {}
};
const pkgAat2 = {
  dependencies: {
    "A": "^2.0.0"
  },
  devDependencies: {}
};
const pkgAat2x = {
  dependencies: {
    "A": "^2.3.4"
  },
  devDependencies: {}
};
const pkgAat2Dev = {
  dependencies: {
  },
  devDependencies: {
    "A": "^2.0.0"
  }
};
const pkgAat2xDev = {
  dependencies: {
  },
  devDependencies: {
    "A": "^2.3.4"
  }
};
const pkgs = {
  dependencies: {
    "A": "^1.0.0",
    "B": "^2.0.0",
    "C": "^3.0.0"
  },
  devDependencies: {
    "devA": "^1.0.0",
    "devB": "^2.0.0",
    "devC": "^3.0.0"
  }
};

const keyA1 = 'A@^1.0.0';
const keyA1x = 'A@^1.2.3';
const keyA2 = 'A@^2.0.0';
const keyA2x = 'A@^2.3.4';

describe('.topLevelDependencyKeys', function() {
  it('simple', function() {
    expect(topLevelDependencyKeys(pkgAat1)).to.eql([keyA1]);
    expect(topLevelDependencyKeys(pkgAat1x)).to.eql([keyA1x]);
    expect(topLevelDependencyKeys(pkgAat2)).to.eql([keyA2]);
    expect(topLevelDependencyKeys(pkgAat2x)).to.eql([keyA2x]);
    expect(topLevelDependencyKeys(pkgAat2Dev)).to.eql([keyA2]);
    expect(topLevelDependencyKeys(pkgAat2xDev)).to.eql([keyA2x]);
  });
  it('not found', function() {
    expect(topLevelDependencyKeys(emptyPkg)).to.eql([]);
    expect(topLevelDependencyKeys(minimalPkg)).to.eql([]);
  });
});
