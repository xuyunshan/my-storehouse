'use strict';

const chai = require('chai');
const chaiAsPromised = require('chai-as-promised');
const sinon = require('sinon');
const nodeMpBridge = require('..');

chai.use(chaiAsPromised);

const expect = chai.expect;
const checkUrlExists = nodeMpBridge.checkUrlExists;

describe('checkUrlExists', function() {
  beforeEach('set up `requestWithRetries` stub', function() {
    this.stub = sinon.stub(nodeMpBridge, 'requestWithRetries');
  });

  afterEach('tear down `requestWithRetries` stub', function() {
    this.stub.restore();
  });

  it('returns `true` on non-errors', function() {
    this.stub.resolves(true);

    return expect(checkUrlExists('http://localhost/')).is.eventually.true;
  });

  it('returns `false` on status 404', function() {
    const error = new Error('404 NOT FOUND');

    error.statusCode = 404;

    this.stub.rejects(error);

    return expect(checkUrlExists('http://localhost/')).is.eventually.false;
  });

  it('throws on other client errors', function() {
    const error = new Error('400 BAD REQUEST');

    error.statusCode = 400;

    this.stub.rejects(error);

    return expect(checkUrlExists('http://localhost/')).to.be.rejected;
  });

  it('throws on server errors', function() {
    const error = new Error('500 SERVER ERROR');

    error.statusCode = 500;

    this.stub.rejects(error);

    return expect(checkUrlExists('http://localhost/')).to.be.rejected;
  });

  it('throws on connection errors', function() {
    this.stub.rejects(new Error('ECONNREFUSED'));

    return expect(checkUrlExists('http://localhost/')).to.be.rejected;
  });
});
