'use strict';

const expect = require('chai').expect;
const dependenciesDiff = require('../').dependenciesDiff;

describe('.dependenciesDiff', function() {
  it('detects an added external dependency', function() {
    const { added, changed, removed } = dependenciesDiff({ external: {}, product: {} }, {
      external: { baz: 'npm:baz:1.0.1' },
      product: {},
    });

    expect(added).to.deep.equal(['baz@1.0.1']);
    expect(changed).to.be.empty;
    expect(removed).to.be.empty;
  });

  it('detects an added internal dependency', function() {
    const { added, changed, removed } = dependenciesDiff({ external: {}, product: {} }, {
      external: {},
      product: { baz: { version: '1.0.1' } },
    });

    expect(added).to.deep.equal(['@linkedin/baz@1.0.1']);
    expect(changed).to.be.empty;
    expect(removed).to.be.empty;
  });

  it('detects a changed external dependency', function() {
    const { added, changed, removed } = dependenciesDiff({
      external: { foo: 'npm:foo:1.5.3' },
      product: {},
    }, {
      external: { foo: 'npm:foo:2.0.0' },
      product: {},
    });

    expect(added).to.be.empty;
    expect(changed).to.deep.equal(['foo@2.0.0']);
    expect(removed).to.be.empty;
  });

  it('detects a changed internal dependency', function() {
    const { added, changed, removed } = dependenciesDiff({
      external: {},
      product: { foo: { version: '1.5.3' } },
    }, {
      external: {},
      product: { foo: { version: '2.0.0' } },
    });

    expect(added).to.be.empty;
    expect(changed).to.deep.equal(['@linkedin/foo@2.0.0']);
    expect(removed).to.be.empty;
  });

  it('detects a removed external dependency', function() {
    const { added, changed, removed } = dependenciesDiff({
      external: { bar: 'npm:bar:0.8.7' },
      product: {},
    }, { external: {}, product: {} });

    expect(added).to.be.empty;
    expect(changed).to.be.empty;
    expect(removed).to.deep.equal(['bar@0.8.7']);
  });

  it('detects a removed internal dependency', function() {
    const { added, changed, removed } = dependenciesDiff({
      external: {},
      product: { bar: { version: '0.8.7' } },
    }, { external: {}, product: {} });

    expect(added).to.be.empty;
    expect(changed).to.be.empty;
    expect(removed).to.deep.equal(['@linkedin/bar@0.8.7']);
  });

  it('detects a combination of differences', function() {
    const { added, changed, removed } = dependenciesDiff({
      external: { bar: 'npm:bar:0.8.7', foo: 'npm:foo:1.5.3' },
      product: { bar: { version: '0.8.7' }, foo: { version: '1.5.3' } },
    }, {
      external: { baz: 'npm:baz:1.0.1', foo: 'npm:foo:2.0.0' },
      product: { baz: { version: '1.0.1' }, foo: { version: '2.0.0' } },
    });

    expect(added).to.deep.equal(['baz@1.0.1', '@linkedin/baz@1.0.1']);
    expect(changed).to.deep.equal(['foo@2.0.0', '@linkedin/foo@2.0.0']);
    expect(removed).to.deep.equal(['bar@0.8.7', '@linkedin/bar@0.8.7']);
  });
});
