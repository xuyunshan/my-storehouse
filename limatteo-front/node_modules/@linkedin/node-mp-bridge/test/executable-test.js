'use strict';

const ConfigStore = require('configstore');
const expect = require('chai').expect;
const fixturify = require('fixturify');
const exec = require('execa');
const path = require('path');
const fs = require('fs-extra');
const yarn = require('@yarnpkg/lockfile');

const BIN_PATH = `${__dirname}/../bin/node-mp-bridge`;
const TMP_ROOT = path.join(__dirname, '../tmp/example-mp_trunk');

describe('node-mp-bridge', function () {
  afterEach(() => {
    fs.removeSync(TMP_ROOT);
  });

  it('fails with useful error if required files are missing', function () {
    fixturify.writeSync(TMP_ROOT, { /* ... no files ... */ });

    expect(() => exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    })).to.throw(/Missing yarn\.lock, package\.json, product-spec\.json in/);
  });

  it('can find product-spec.json one level up', function () {
    fixturify.writeSync(TMP_ROOT, {
      fe: {
        'package.json': JSON.stringify({
          name: "example-mp"
        }),

        'yarn.lock': '',
      },

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      }),
    });

    expect(() => exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: `${TMP_ROOT}/fe`,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    })).to.not.throw();
  });

  it('supports basic noop', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp"
      }),

      'yarn.lock': '',

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      })
    });

    exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    });

    expect(fixturify.readSync(TMP_ROOT)).to.eql({
      'package.json': JSON.stringify({
        name: "example-mp"
      }),

      'yarn.lock': '',

      'product-spec.json': JSON.stringify({
        name: "example-mp",
        product: {},
        external: {}
      })
    });
  });

  context('flags', function () {
    beforeEach('set up noop', function () {
      fixturify.writeSync(TMP_ROOT, {
        'package.json': JSON.stringify({
          name: "example-mp"
        }),

        'yarn.lock': '',

        'product-spec.json': JSON.stringify({
          "name": "example-mp",
          "product": {},
          "external": {}
        })
      });
    });

    it('accepts --root', function () {
      expect(() => exec.sync(BIN_PATH, [
        'updateProductSpec',
        '--milestone', '1',
        '--root', TMP_ROOT,
      ], { env: { SKIP_METRICS: 1 } })).to.not.throw();
    });

    it('requires --root to have a value', function () {
      expect(() => exec.sync(BIN_PATH, ['--milestone', '1', '--root'], { env: { SKIP_METRICS: 1 } })).to.throw(/specify a value/);
    });

    it('accepts --components', function () {
      expect(() => exec.sync(BIN_PATH, [
        'updateProductSpec',
        '--milestone', '1',
        '--components', 'foo bar baz',
      ], { cwd: TMP_ROOT, env: { SKIP_METRICS: 1 } })).to.not.throw();
    });

    it('requires --components to have a value', function () {
      expect(() => exec.sync(BIN_PATH, ['--milestone', '1', '--components'], { cwd: TMP_ROOT, env: { SKIP_METRICS: 1 } })).to.throw(/specify a value/);
    });
  });

  it('maintains indent (4 spaces package.json, and 5 for product-spec.json)', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp"
      }, null, 4),

      'yarn.lock': '',

      'product-spec.json': JSON.stringify({
        name: "example-mp",
        product: {},
        external: {}
      }, null, 5)
    });

    exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    });

    expect(fixturify.readSync(TMP_ROOT)).to.eql({
      'package.json': JSON.stringify({
        name: "example-mp"
      }, null, 4),

      'yarn.lock': '',

      'product-spec.json': JSON.stringify({
        name: "example-mp",
        product: {},
        external: {}
      }, null, 5)
    });
  });

  it('adds Bower components', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: 'example-mp',
      }),

      'yarn.lock': '',

      'bower.json': JSON.stringify({
        dependencies: {
          'ember-cli-shims': '>0.6',
        },
        elrResolutions: {
          'ember': '3.0.2',
        },
      }),

      'bower.lock': JSON.stringify([
        {
          'dependencies': {},
          'originalFolderName': 'ember',
          'artifactoryUrl': '…',
          'version': '2.18.2',
          'license': 'MIT',
          'packageName': 'ember',
          'intent': '2.18.2',
          'name': '@components/ember',
        },
        {
          'dependencies': {},
          'originalFolderName': 'jquery',
          'artifactoryUrl': '…',
          'version': '3.1.0',
          'license': 'MIT',
          'packageName': 'jquery',
          'intent': '>3',
          'name': '@components/jquery',
        }
      ]),

      bower_components: {
        ember: {
          'bower.json': JSON.stringify({
            dependencies: {},
            name: 'ember',
            version: '3.0.2',
            license: 'MIT',
          }),
        },

        'ember-cli-shims': {
          'bower.json': JSON.stringify({
            dependencies: {},
            name: 'ember',
            version: '0.6.7',
            license: 'MIT',
          }),
        },
      },

      'product-spec.json': JSON.stringify({
        name: 'example-mp',
        product: {},
        external: {
          'ember-component': 'npm:@components/ember:2.18.2',
          'jquery-component': 'npm:@components/jquery:3.1.0',
        },
      }),
    });

    exec.sync(BIN_PATH, ['--milestone', '1', 'updateBowerLockAfterInstall', '--components', 'ember ember-cli-shims'], {
      cwd: TMP_ROOT,
      env: {
        MOCK_URLS: 'pass',
        SKIP_METRICS: 1,
      },
    });

    const output = fixturify.readSync(TMP_ROOT);

    expect(output['bower.lock']).to.equal(JSON.stringify([
      {
        'dependencies': {},
        'originalFolderName': 'ember',
        'artifactoryUrl': 'http://dev-artifactory.corp.linkedin.com:8081/artifactory/npm-components/@components/ember/-/@components/ember-3.0.2.tgz',
        'version': '3.0.2',
        'license': 'MIT',
        'packageName': 'ember',
        'intent': '3.0.2',
        'name': '@components/ember',
      },
      {
        'dependencies': {},
        'originalFolderName': 'ember-cli-shims',
        'artifactoryUrl': 'http://dev-artifactory.corp.linkedin.com:8081/artifactory/npm-components/@components/ember-cli-shims/-/@components/ember-cli-shims-0.6.7.tgz',
        'version': '0.6.7',
        'license': 'MIT',
        'packageName': 'ember-cli-shims',
        'intent': '>0.6',
        'name': '@components/ember-cli-shims',
      },
      {
        'dependencies': {},
        'originalFolderName': 'jquery',
        'artifactoryUrl': '…',  // Existing lock entries are not mutated.
        'version': '3.1.0',
        'license': 'MIT',
        'packageName': 'jquery',
        'intent': '>3',
        'name': '@components/jquery',
      }
    ]));
  });

  it('reports Bower components missing from Artifactory', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: 'example-mp',
      }),

      'yarn.lock': '',

      'bower.json': JSON.stringify({
        dependencies: {
          'foo': '1.0.0',
        },
      }),

      'bower.lock': '[]',

      bower_components: {
        ember: {
          'bower.json': JSON.stringify({
            dependencies: {},
            name: 'ember',
            version: '2.18.2',
            license: 'MIT',
          }),
        },
      },

      'product-spec.json': JSON.stringify({
        name: 'example-mp',
        product: {},
        external: {},
      }),
    });

    expect(() => exec.sync(BIN_PATH, ['--milestone', '1', 'updateBowerLockAfterInstall', '--components', 'ember'], {
      cwd: TMP_ROOT,
      env: {
        MOCK_URLS: 'fail',
        SKIP_METRICS: 1,
      },
    })).to.throw(/Artifactory/);
  });

  it('removes Bower components', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: 'example-mp',
      }),

      'yarn.lock': '',

      'bower.lock': JSON.stringify([
        {
          'dependencies': {},
          'originalFolderName': 'ember',
          'artifactoryUrl': '…',
          'version': '2.18.2',
          'license': 'MIT',
          'packageName': 'ember',
          'intent': '2.18.2',
          'name': '@components/ember',
        },
        {
          'dependencies': {},
          'originalFolderName': 'jquery',
          'artifactoryUrl': '…',
          'version': '3.1.0',
          'license': 'MIT',
          'packageName': 'jquery',
          'intent': '>3',
          'name': '@components/jquery',
        }
      ]),

      'product-spec.json': JSON.stringify({
        name: 'example-mp',
        product: {},
        external: {
          'ember-component': 'npm:@components/ember:2.18.2',
          'jquery-component': 'npm:@components/jquery:3.1.0',
        },
      }),
    });

    exec.sync(BIN_PATH, ['--milestone', '1', 'updateBowerLockBeforeUninstall', '--components', 'jquery'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        SKIP_METRICS: 1,
      },
    });

    expect(fixturify.readSync(TMP_ROOT)['bower.lock']).to.equal(JSON.stringify([
      {
        'dependencies': {},
        'originalFolderName': 'ember',
        'artifactoryUrl': '…',
        'version': '2.18.2',
        'license': 'MIT',
        'packageName': 'ember',
        'intent': '2.18.2',
        'name': '@components/ember',
      },
    ]));
  });

  it('installs Bower components', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: 'example-mp',
      }),

      'yarn.lock': '',

      'bower.lock': JSON.stringify([
        {
          'dependencies': {},
          'originalFolderName': 'jquery',
          'artifactoryUrl': '…',
          'version': '3.1.0',
          'license': 'MIT',
          'packageName': 'jquery',
          'intent': '>3',
          'name': '@components/jquery',
        }
      ]),

      'product-spec.json': JSON.stringify({
        name: 'example-mp',
        product: {},
        external: {
          'jquery-component': 'npm:@components/jquery:3.1.0',
        },
      }),
    });

    exec.sync(BIN_PATH, ['--milestone', '1', 'installBowerComponentsFromLock'], {
      cwd: TMP_ROOT,
      env: {
        MOCK_ARTIFACTORY: 1,
        SKIP_METRICS: 1,
      },
    });

    expect(fs.existsSync(`${TMP_ROOT}/bower_components/jquery/bower.json`)).to.be.true;
  });

  it('add and remove dependencies', function () {
    // setup default MP, with package.json, yarn.lock and product-spec.json
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
          "@linkedin/artdeco-eyeglass": "^13.1.7",
          "ember-wormhole": "0.5.3"
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        },
        "@linkedin/artdeco-eyeglass@^13.1.7": {
          version: "13.19.12",
          resolved: "...snip...",
          dependencies: {
            "@linkedin/artdeco-icons-web": "^13.17.1",
            "colors": "1.1.2",
            "document-register-element": "^0.5.4",
            "eyeglass-restyle": "1.1.0",
            "glob": "7.0.5",
            "resolve-from": "^3.0.0"
          }
        },
        "ember-wormhole@0.5.3": {
          version: "0.5.3",
          resolved: "...snip...",
          dependencies: {
            "ember-cli-babel": "^6.8.2",
            "ember-cli-htmlbars": "^2.0.1"
          }
        }
      }),

      'product-spec.json': JSON.stringify({
        name: "example-mp",
        product: {},
        external: {}
      })
    });

    // should update product-spec.json's product and external
    exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    });

    // expect product-spec.json to be updated
    expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(
      JSON.stringify({
        name: "example-mp",
        product: {
          "abi-js": {
            libraries: ["@linkedin/abi-js"],
            version: "0.0.41"
          },
          "artdeco-eyeglass": {
            libraries: ["@linkedin/artdeco-eyeglass"],
            version: "13.19.12"
          }
        },
        external: {
          "ember-wormhole": "npm:ember-wormhole:0.5.3"
        }
      })
    );

    // remove @linkedin/artdeco-eyeglass
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
          "ember-wormhole": "0.5.3"
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        },
        "ember-wormhole@0.5.3": {
          version: "0.5.3",
          resolved: "...snip...",
          dependencies: {
            "ember-cli-babel": "^6.8.2",
            "ember-cli-htmlbars": "^2.0.1"
          }
        }
      })
    });

    // run script
    exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    });

    // product-spec.json should now, no longer have @linkedin/artdeco-eyeglass
    expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(
      JSON.stringify({
        name: "example-mp",
        product: {
          "abi-js": {
            libraries: ["@linkedin/abi-js"],
            version: "0.0.41"
          },
        },
        external: {
          "ember-wormhole": "npm:ember-wormhole:0.5.3"
        }
      })
    );
  });

  context('Volta updates', function () {
    const config = new ConfigStore('node-mp-bridge');

    this.beforeEach(function () {
      config.delete('voltaUpdateLastNotified');
    });

    it('displays a message when an update is available and current version < 0.7.0', function () {
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.7.1',
          MOCK_VOLTA: '0.6.8',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      expect(stdout).to.include('new version');
    });

    it('does not display a message when no update is available', function () {
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.6.8',
          MOCK_VOLTA: '0.6.8',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      expect(stdout).to.not.include('new version');
    });

    it('does not display a message when current version equal to 0.7.0', function () {
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.7.1',
          MOCK_VOLTA: '0.7.0',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      expect(stdout).to.not.include('new version');
    });

    it('does not display a message when current version larger than 0.7.0', function () {
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.7.2',
          MOCK_VOLTA: '0.7.1',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      expect(stdout).to.not.include('new version');
    });

    it('does not display a message in CI', function () {
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          CI: '',
          MOCK_ARTIFACTORY: '0.7.1',
          MOCK_VOLTA: '0.6.8',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      expect(stdout).to.not.include('new version');
    });

    it('does not display a message if Volta is not installed', function () {
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.7.1',
          MOCK_VOLTA: '0.6.8',
          SKIP_METRICS: 1,
        },
      });

      expect(stdout).to.not.include('new version');
    });

    it('does not display a message one was recently displayed', function () {
      // A message will be displayed on the first invocation…
      exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.7.1',
          MOCK_VOLTA: '0.6.8',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      //…but should not be on the second.
      const { stdout } = exec.sync(BIN_PATH, ['--milestone', '1', 'checkForVoltaUpdate'], {
        extendEnv: false,

        env: {
          MOCK_ARTIFACTORY: '0.5.3',
          MOCK_VOLTA: '0.5.1',
          SKIP_METRICS: 1,
          VOLTA_HOME: '',
        },
      });

      expect(stdout).to.not.include('new version');
    });
  });

  it('detects changes to Volta settings', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {},
        volta: {
          node: "8.9.1",
          yarn: "1.17.3"
        }
      }),

      'yarn.lock': yarn.stringify({}),

      'product-spec.json': JSON.stringify({
        name: "example-mp",
        product: {},
        external: {},
        build: {
          versions: {
            node: "6.0.0",
            yarn: "1.0.0"
          }
        }
      })
    });

    // should update product-spec.json's build.versions
    exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    });

    // expect product-spec.json to be updated
    expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(
      JSON.stringify({
        name: "example-mp",
        product: {},
        external: {},
        build: {
          versions: {
            node: "8.9.1",
            yarn: "1.17.3"
          }
        }
      })
    );
  });

  it('does not update product spec build versions if non are present', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {},
        volta: {
          node: "8.9.1",
          yarn: "1.17.3"
        }
      }),

      'yarn.lock': yarn.stringify({}),

      'product-spec.json': JSON.stringify({
        name: "example-mp",
        product: {},
        external: {},
        build: {}
      })
    });

    // should update product-spec.json's build.versions
    exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
      cwd: TMP_ROOT,

      env: {
        CI: '',
        DEPENDENT_PRODUCT_NAME: '',
        SKIP_METRICS: 1,
      },
    });

    // expect product-spec.json to be updated
    expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(
      JSON.stringify({
        name: "example-mp",
        product: {},
        external: {},
        build: {}
      })
    );
  });

  it('changes should cause execution to fail in CI', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      })
    });

    expect(() => {
      exec.sync('node', [BIN_PATH, '--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: true,
          DEPENDENT_PRODUCT_NAME: '',
          SKIP_METRICS: 1,
        },
      });
    }).to.throw(/Dependency changes detected in CI, aborting./);
  });

  it('changes in CI should be allowed when dependency testing', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      })
    });

    expect(() => {
      exec.sync('node', [BIN_PATH, '--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: true,
          DEPENDENT_PRODUCT_NAME: "someProduct",
          SKIP_METRICS: 1,
        },
      });
    }).to.not.throw();

    // no change in product-spec in dependency testing
    expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(JSON.stringify({
      "name": "example-mp",
      "product": {},
      "external": {}
    }));
  });

  it('does not update product spec if DISABLE_PRODUCTSPEC_UPDATE is true', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      })
    });

    expect(() => {
      exec.sync('node', [BIN_PATH, '--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: true,
          DISABLE_PRODUCTSPEC_UPDATE: true,
          SKIP_METRICS: 1,
        },
      });
    }).to.not.throw();

    // no change in product-spec in dependency testing
    expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(JSON.stringify({
      "name": "example-mp",
      "product": {},
      "external": {}
    }));
  });

  it('changes in CI should be allowed when ALLOW_DEPENDENCY_CHANGES is true', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      })
    });

    expect(() => {
      exec.sync('node', [BIN_PATH, '--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: true,
          DEPENDENT_PRODUCT_NAME: '',
          ALLOW_DEPENDENCY_CHANGES: true,
          SKIP_METRICS: 1,
        },
      });
    }).to.not.throw();
  });

  it('changes in CI should be allowed when ALLOW_DEPENDENCY_CHANGES is false', function () {
    fixturify.writeSync(TMP_ROOT, {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/abi-js": "0.0.41",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/abi-js@0.0.41": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      })
    });

    expect(() => {
      exec.sync('node', [BIN_PATH, '--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: true,
          DEPENDENT_PRODUCT_NAME: '',
          ALLOW_DEPENDENCY_CHANGES: false,
          SKIP_METRICS: 1,
        },
      });
    }).to.throw(/Dependency changes detected in CI, aborting./);
  });

  describe('link: URLs', function () {
    const fixture = {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/linked": "link:/path",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/linked@link:/path": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      }),
    };

    it('does not copy link: packages to product-spec.json', function () {
      fixturify.writeSync(TMP_ROOT, fixture);

      exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: '',
          DEPENDENT_PRODUCT_NAME: '',
          SKIP_METRICS: 1,
        }
      });

      expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(
        JSON.stringify({
          "name": "example-mp",
          "product": {},
          "external": {}
        })
      );
    });
  });

  describe('file: URLs', function () {
    const fixture = {
      'package.json': JSON.stringify({
        name: "example-mp",
        dependencies: {
          "@linkedin/local": "file:/path",
        }
      }),

      'yarn.lock': yarn.stringify({
        "@linkedin/local@file:/path": {
          version: "0.0.41",
          resolved: "...snip..."
        }
      }),

      'product-spec.json': JSON.stringify({
        "name": "example-mp",
        "product": {},
        "external": {}
      }),
    };

    it('does not copy file: packages to product-spec.json', function () {
      fixturify.writeSync(TMP_ROOT, fixture);

      exec.sync(BIN_PATH, ['--milestone', '1', 'updateProductSpec'], {
        cwd: TMP_ROOT,

        env: {
          CI: '',
          DEPENDENT_PRODUCT_NAME: '',
          SKIP_METRICS: 1,
        }
      });

      expect(fixturify.readSync(TMP_ROOT)['product-spec.json']).to.eql(
        JSON.stringify({
          "name": "example-mp",
          "product": {},
          "external": {}
        })
      );
    });
  });
});
