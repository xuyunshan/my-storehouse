'use strict';

const expect = require('chai').expect;
const sinon = require('sinon');
const nodeMpBridge = require('..');

const reportTaskTimings = nodeMpBridge.reportTaskTimings;

describe('reportTaskTimings', function() {
  beforeEach('set up `requestWithRetries` stub', function() {
    this.stub = sinon.stub(nodeMpBridge, 'requestWithRetries');
    this.stub.resolves();
  });

  afterEach('tear down `requestWithRetries` stub', function() {
    this.stub.restore();
  });

  it('reports the product', function() {
    return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1250, []).then(() => {
      expect(this.stub.firstCall.args[2].product).to.equal('foo');
    });
  });

  it('reports the command', function() {
    return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1250, []).then(() => {
      expect(this.stub.firstCall.args[2].command).to.equal('bar');
    });
  });

  it('omits the milestone, if absent', function() {
    return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1250, []).then(() => {
      expect(this.stub.firstCall.args[2]).to.not.have.property('mp_node_bridge_milestone');
    });
  });

  it('reports the milestone, if present', function() {
    return reportTaskTimings('foo', 'bar', 7, 1234567890500, 1250, []).then(() => {
      expect(this.stub.firstCall.args[2].mp_node_bridge_milestone).to.equal(7);
    });
  });

  it('converts the start time to seconds', function() {
    return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1250, []).then(() => {
      expect(this.stub.firstCall.args[2].start).to.be.closeTo(1234567890.5, 0.001);
    });
  });

  it('converts the duration to seconds', function() {
    return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1250, []).then(() => {
      expect(this.stub.firstCall.args[2].duration).be.closeTo(1.25, 0.001);
    });
  });

  describe('tasks', function() {
    const expectedTasks = [
      { task: 'fooTask', start: 1234567890500, duration: 1000 },
      { task: 'barTask', start: 1234567891500, duration: 500 },
      { task: 'bazTask', start: 1234567891700, duration: 250 },
    ];

    it('reports the task', function() {
      return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1750, expectedTasks).then(() => {
        const actualTasks = this.stub.firstCall.args[2].tasks;

        expect(actualTasks.length).to.equal(expectedTasks.length);

        actualTasks.forEach((task, i) => {
          expect(task.task).to.equal(expectedTasks[i].task);
        });
      });
    });

    it('converts the start time to milliseconds since command start', function() {
      return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1750, expectedTasks).then(() => {
        this.stub.firstCall.args[2].tasks.forEach((task, i) => {
          expect(task.start).to.equal(expectedTasks[i].start - 1234567890500);
        });
      });
    });

    it('reports the duration', function() {
      return reportTaskTimings('foo', 'bar', undefined, 1234567890500, 1750, expectedTasks).then(() => {
        this.stub.firstCall.args[2].tasks.forEach((task, i) => {
          expect(task.duration).to.equal(expectedTasks[i].duration);
        });
      });
    });
  });
});
