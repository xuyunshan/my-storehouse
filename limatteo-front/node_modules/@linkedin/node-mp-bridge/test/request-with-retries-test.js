'use strict';

const expect = require('chai').expect;
const sinon = require('sinon');
const nodeMpBridge = require('..');

const requestWithRetries = nodeMpBridge.requestWithRetries;

describe('requestWithRetries', function() {
  beforeEach('set up `requestAsPromise` stub', function() {
    this.stub = sinon.stub(nodeMpBridge, 'requestAsPromise');
  });

  afterEach('tear down `requestAsPromise` stub', function() {
    this.stub.restore();
  });

  it('only makes one attempt on success', function() {
    this.stub.resolves();

    return requestWithRetries('HEAD', 'http://localhost/').then(() => {
      expect(this.stub.calledOnce).to.be.true;
    });
  });

  it('does not retry connection failures', function() {
    this.stub.rejects(new Error('ECONNREFUSED'));

    return requestWithRetries('HEAD', 'http://localhost/', undefined, 10).catch(() => {
      expect(this.stub.calledOnce).to.be.true;
    });
  });

  it('does not retry client errors', function () {
    const error = new Error('404 NOT FOUND');

    error.statusCode = 404;

    this.stub.rejects(error);

    return requestWithRetries('HEAD', 'http://localhost/', undefined, 10).catch(() => {
      expect(this.stub.calledOnce).to.be.true;
    });
  });

  it('retries server errors', function() {
    const error = new Error('500 SERVER ERROR');

    error.statusCode = 500;

    this.stub.rejects(error);
    this.timeout(10000);  // This test takes ~6 seconds to run.

    return requestWithRetries('HEAD', 'http://localhost/', undefined, 10).catch(() => {
      expect(this.stub.calledThrice).to.be.true;
    });
  });

  it('passes a `body` argument to `requestAsPromise`', function() {
    this.stub.resolves();

    const body = { foo: 'bar' };

    return requestWithRetries('HEAD', 'http://localhost/', body).then(() => {
      expect(this.stub.firstCall.args[2]).to.equal(body);
    });
  });
});
