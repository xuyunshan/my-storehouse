'use strict';

const expect = require('chai').expect;
const parse = require('../').parse;

describe('.parse', function() {
  it('works', function() {
    expect(parse('compiler@^0.29.0')).to.eql({
      org: undefined,
      name: 'compiler',
      fullName: 'compiler',
      intent: '^0.29.0'
    });
  });

  it('accepts orgs', function() {
    expect(parse('@glimmer/compiler@^0.29.0')).to.eql({
      org: '@glimmer',
      name: 'compiler',
      fullName: '@glimmer/compiler',
      intent: '^0.29.0'
    });
  });

  it('accepts relative paths', function() {
    expect(parse('compiler@../compiler')).to.eql({
      org: undefined,
      name: 'compiler',
      fullName: 'compiler',
      intent: '../compiler',
    });
  });

  it('accepts URLs', function() {
    expect(parse('compiler@https://github.com/foo/compiler')).to.eql({
      org: undefined,
      name: 'compiler',
      fullName: 'compiler',
      intent: 'https://github.com/foo/compiler',
    });
  });

  it('rejects missing @', function() {
    expect(() => parse('compiler^0.29.0')).to.throw(`Unable to parse: 'compiler^0.29.0'`)
  });

  it('rejects multiple names', function() {
    expect(() => parse('@glimmer/foo/compiler@^0.29.0')).to.throw(`Unable to parse: '@glimmer/foo/compiler@^0.29.0'`)
  });

  it('rejects malformed orgs', function() {
    expect(() => parse('glimmer/compiler@^0.29.0')).to.throw(`Unable to parse: 'glimmer/compiler@^0.29.0'`)
  });

  it('rejects multiple orgs', function() {
    expect(() => parse('@glimmer/@foo/compiler@^0.29.0')).to.throw(`Unable to parse: '@glimmer/@foo/compiler@^0.29.0'`)
  });

  it('rejects multiple intents', function() {
    expect(() => parse('compiler@^0.29.0@0.30.1')).to.throw(`Unable to parse: 'compiler@^0.29.0@0.30.1'`)
  });
});
