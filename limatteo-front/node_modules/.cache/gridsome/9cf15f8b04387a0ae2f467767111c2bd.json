{"remainingRequest":"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yunsxu/Desktop/my-storehouse/limatteo-front/src/components/buefy/components/icon/Icon.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/src/components/buefy/components/icon/Icon.vue","mtime":1618390616062},{"path":"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/cache-loader/dist/cjs.js","mtime":1613817252946},{"path":"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/babel-loader/lib/index.js","mtime":1613817252617},{"path":"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/cache-loader/dist/cjs.js","mtime":1613817252946},{"path":"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/vue-loader/lib/index.js","mtime":1613817257814}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.split\";\nimport _toArray from \"/Users/yunsxu/Desktop/my-storehouse/limatteo-front/node_modules/@babel/runtime/helpers/esm/toArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport config from '../../utils/config';\nimport getIcons from '../../utils/icons';\nexport default {\n  name: 'BIcon',\n  props: {\n    type: [String, Object],\n    component: String,\n    pack: String,\n    icon: String,\n    size: String,\n    customSize: String,\n    customClass: String,\n    both: Boolean // This is used internally to show both MDI and FA icon\n\n  },\n  computed: {\n    iconConfig: function iconConfig() {\n      var allIcons = getIcons();\n      return allIcons[this.newPack];\n    },\n    iconPrefix: function iconPrefix() {\n      if (this.iconConfig && this.iconConfig.iconPrefix) {\n        return this.iconConfig.iconPrefix;\n      }\n\n      return '';\n    },\n\n    /**\n    * Internal icon name based on the pack.\n    * If pack is 'fa', gets the equivalent FA icon name of the MDI,\n    * internal icons are always MDI.\n    */\n    newIcon: function newIcon() {\n      return \"\".concat(this.iconPrefix).concat(this.getEquivalentIconOf(this.icon));\n    },\n    newPack: function newPack() {\n      return this.pack || config.defaultIconPack;\n    },\n    newType: function newType() {\n      if (!this.type) return;\n      var splitType = [];\n\n      if (typeof this.type === 'string') {\n        splitType = this.type.split('-');\n      } else {\n        for (var key in this.type) {\n          if (this.type[key]) {\n            splitType = key.split('-');\n            break;\n          }\n        }\n      }\n\n      if (splitType.length <= 1) return;\n\n      var _splitType = splitType,\n          _splitType2 = _toArray(_splitType),\n          type = _splitType2.slice(1);\n\n      return \"has-text-\".concat(type.join('-'));\n    },\n    newCustomSize: function newCustomSize() {\n      return this.customSize || this.customSizeByPack;\n    },\n    customSizeByPack: function customSizeByPack() {\n      if (this.iconConfig && this.iconConfig.sizes) {\n        if (this.size && this.iconConfig.sizes[this.size] !== undefined) {\n          return this.iconConfig.sizes[this.size];\n        } else if (this.iconConfig.sizes[\"default\"]) {\n          return this.iconConfig.sizes[\"default\"];\n        }\n      }\n\n      return null;\n    },\n    useIconComponent: function useIconComponent() {\n      return this.component || config.defaultIconComponent;\n    }\n  },\n  methods: {\n    /**\n    * Equivalent icon name of the MDI.\n    */\n    getEquivalentIconOf: function getEquivalentIconOf(value) {\n      // Only transform the class if the both prop is set to true\n      if (!this.both) {\n        return value;\n      }\n\n      if (this.iconConfig && this.iconConfig.internalIcons && this.iconConfig.internalIcons[value]) {\n        return this.iconConfig.internalIcons[value];\n      }\n\n      return value;\n    }\n  }\n};",{"version":3,"sources":["Icon.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <span class=\"icon\" :class=\"[newType, size]\">\n        <i\n            v-if=\"!useIconComponent\"\n            :class=\"[newPack, newIcon, newCustomSize, customClass]\"/>\n\n        <component\n            v-else\n            :is=\"useIconComponent\"\n            :icon=\"[newPack, newIcon]\"\n            :size=\"newCustomSize\"\n            :class=\"[customClass]\"/>\n    </span>\n</template>\n\n<script>\nimport config from '../../utils/config'\nimport getIcons from '../../utils/icons'\n\nexport default {\n    name: 'BIcon',\n    props: {\n        type: [String, Object],\n        component: String,\n        pack: String,\n        icon: String,\n        size: String,\n        customSize: String,\n        customClass: String,\n        both: Boolean // This is used internally to show both MDI and FA icon\n    },\n    computed: {\n        iconConfig() {\n            let allIcons = getIcons()\n            return allIcons[this.newPack]\n        },\n        iconPrefix() {\n            if (this.iconConfig && this.iconConfig.iconPrefix) {\n                return this.iconConfig.iconPrefix\n            }\n            return ''\n        },\n        /**\n        * Internal icon name based on the pack.\n        * If pack is 'fa', gets the equivalent FA icon name of the MDI,\n        * internal icons are always MDI.\n        */\n        newIcon() {\n            return `${this.iconPrefix}${this.getEquivalentIconOf(this.icon)}`\n        },\n        newPack() {\n            return this.pack || config.defaultIconPack\n        },\n        newType() {\n            if (!this.type) return\n\n            let splitType = []\n            if (typeof this.type === 'string') {\n                splitType = this.type.split('-')\n            } else {\n                for (let key in this.type) {\n                    if (this.type[key]) {\n                        splitType = key.split('-')\n                        break\n                    }\n                }\n            }\n            if (splitType.length <= 1) return\n\n            const [, ...type] = splitType\n            return `has-text-${type.join('-')}`\n        },\n        newCustomSize() {\n            return this.customSize || this.customSizeByPack\n        },\n        customSizeByPack() {\n            if (this.iconConfig && this.iconConfig.sizes) {\n                if (this.size && this.iconConfig.sizes[this.size] !== undefined) {\n                    return this.iconConfig.sizes[this.size]\n                } else if (this.iconConfig.sizes.default) {\n                    return this.iconConfig.sizes.default\n                }\n            }\n            return null\n        },\n        useIconComponent() {\n            return this.component || config.defaultIconComponent\n        }\n    },\n    methods: {\n        /**\n        * Equivalent icon name of the MDI.\n        */\n        getEquivalentIconOf(value) {\n            // Only transform the class if the both prop is set to true\n            if (!this.both) {\n                return value\n            }\n\n            if (this.iconConfig &&\n                this.iconConfig.internalIcons &&\n                this.iconConfig.internalIcons[value]) {\n                return this.iconConfig.internalIcons[value]\n            }\n            return value\n        }\n    }\n}\n</script>\n"],"sourceRoot":"src/components/buefy/components/icon"}]}